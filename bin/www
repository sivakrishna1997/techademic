#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('5001');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
// const io = require('socket.io')(server)
/**
 * Listen on provided port, on all network interfaces.
 */
// server.listen(process.env.PORT || port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Server started on port ' + bind);
}




// io.on('connection', client => {
//   client.on('connect', () => {
//     io.emit('newUser', "connected");
//   })

//   client.on('disconnect', () => {
//     io.emit('userLeft', "disconnected");
//   })

//   client.on('message', (m) => {
//     // console.log('[server](message): %s', JSON.stringify(m));
//     io.emit('message', m);
//   })


//   client.on("NewClient", function () {
//     io.emit('CreatePeer');
//   });
//   client.on('Offer', (offer) => io.emit('BackOffer', offer));
//   client.on('Answer', (data) => io.emit('BackAnswer', data));
//   client.on('disconnect', () => io.emit('Disconnect'));
//   client.on('subtitleChanged', (data) => io.emit('subtitleChanged', data));

//   client.on('Drawing', (draw) => io.emit('Drawing', draw));
// })

